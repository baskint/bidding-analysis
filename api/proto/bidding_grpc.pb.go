// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/bidding.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BiddingService_ProcessBid_FullMethodName       = "/bidding.BiddingService/ProcessBid"
	BiddingService_GetBidHistory_FullMethodName    = "/bidding.BiddingService/GetBidHistory"
	BiddingService_StreamBidUpdates_FullMethodName = "/bidding.BiddingService/StreamBidUpdates"
)

// BiddingServiceClient is the client API for BiddingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BiddingService handles real-time bid processing and predictions
type BiddingServiceClient interface {
	// ProcessBid handles incoming bid requests and returns optimal bid price
	ProcessBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	// GetBidHistory returns historical bid data for analysis
	GetBidHistory(ctx context.Context, in *BidHistoryRequest, opts ...grpc.CallOption) (*BidHistoryResponse, error)
	// StreamBidUpdates provides real-time bid updates
	StreamBidUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BidUpdate], error)
}

type biddingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiddingServiceClient(cc grpc.ClientConnInterface) BiddingServiceClient {
	return &biddingServiceClient{cc}
}

func (c *biddingServiceClient) ProcessBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, BiddingService_ProcessBid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biddingServiceClient) GetBidHistory(ctx context.Context, in *BidHistoryRequest, opts ...grpc.CallOption) (*BidHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidHistoryResponse)
	err := c.cc.Invoke(ctx, BiddingService_GetBidHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biddingServiceClient) StreamBidUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BidUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BiddingService_ServiceDesc.Streams[0], BiddingService_StreamBidUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, BidUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BiddingService_StreamBidUpdatesClient = grpc.ServerStreamingClient[BidUpdate]

// BiddingServiceServer is the server API for BiddingService service.
// All implementations must embed UnimplementedBiddingServiceServer
// for forward compatibility.
//
// BiddingService handles real-time bid processing and predictions
type BiddingServiceServer interface {
	// ProcessBid handles incoming bid requests and returns optimal bid price
	ProcessBid(context.Context, *BidRequest) (*BidResponse, error)
	// GetBidHistory returns historical bid data for analysis
	GetBidHistory(context.Context, *BidHistoryRequest) (*BidHistoryResponse, error)
	// StreamBidUpdates provides real-time bid updates
	StreamBidUpdates(*StreamRequest, grpc.ServerStreamingServer[BidUpdate]) error
	mustEmbedUnimplementedBiddingServiceServer()
}

// UnimplementedBiddingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBiddingServiceServer struct{}

func (UnimplementedBiddingServiceServer) ProcessBid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBid not implemented")
}
func (UnimplementedBiddingServiceServer) GetBidHistory(context.Context, *BidHistoryRequest) (*BidHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidHistory not implemented")
}
func (UnimplementedBiddingServiceServer) StreamBidUpdates(*StreamRequest, grpc.ServerStreamingServer[BidUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBidUpdates not implemented")
}
func (UnimplementedBiddingServiceServer) mustEmbedUnimplementedBiddingServiceServer() {}
func (UnimplementedBiddingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBiddingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiddingServiceServer will
// result in compilation errors.
type UnsafeBiddingServiceServer interface {
	mustEmbedUnimplementedBiddingServiceServer()
}

func RegisterBiddingServiceServer(s grpc.ServiceRegistrar, srv BiddingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBiddingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BiddingService_ServiceDesc, srv)
}

func _BiddingService_ProcessBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingServiceServer).ProcessBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiddingService_ProcessBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingServiceServer).ProcessBid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiddingService_GetBidHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingServiceServer).GetBidHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiddingService_GetBidHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingServiceServer).GetBidHistory(ctx, req.(*BidHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiddingService_StreamBidUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiddingServiceServer).StreamBidUpdates(m, &grpc.GenericServerStream[StreamRequest, BidUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BiddingService_StreamBidUpdatesServer = grpc.ServerStreamingServer[BidUpdate]

// BiddingService_ServiceDesc is the grpc.ServiceDesc for BiddingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiddingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidding.BiddingService",
	HandlerType: (*BiddingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessBid",
			Handler:    _BiddingService_ProcessBid_Handler,
		},
		{
			MethodName: "GetBidHistory",
			Handler:    _BiddingService_GetBidHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBidUpdates",
			Handler:       _BiddingService_StreamBidUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/bidding.proto",
}

const (
	AnalyticsService_GetCampaignStats_FullMethodName      = "/bidding.AnalyticsService/GetCampaignStats"
	AnalyticsService_GetFraudAlerts_FullMethodName        = "/bidding.AnalyticsService/GetFraudAlerts"
	AnalyticsService_GetPredictionAccuracy_FullMethodName = "/bidding.AnalyticsService/GetPredictionAccuracy"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnalyticsService handles campaign analytics and reporting
type AnalyticsServiceClient interface {
	// GetCampaignStats returns campaign performance metrics
	GetCampaignStats(ctx context.Context, in *CampaignStatsRequest, opts ...grpc.CallOption) (*CampaignStatsResponse, error)
	// GetFraudAlerts returns detected fraud patterns
	GetFraudAlerts(ctx context.Context, in *FraudAlertsRequest, opts ...grpc.CallOption) (*FraudAlertsResponse, error)
	// GetPredictionAccuracy returns ML model performance metrics
	GetPredictionAccuracy(ctx context.Context, in *AccuracyRequest, opts ...grpc.CallOption) (*AccuracyResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetCampaignStats(ctx context.Context, in *CampaignStatsRequest, opts ...grpc.CallOption) (*CampaignStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignStatsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetCampaignStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetFraudAlerts(ctx context.Context, in *FraudAlertsRequest, opts ...grpc.CallOption) (*FraudAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FraudAlertsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetFraudAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetPredictionAccuracy(ctx context.Context, in *AccuracyRequest, opts ...grpc.CallOption) (*AccuracyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccuracyResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPredictionAccuracy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
//
// AnalyticsService handles campaign analytics and reporting
type AnalyticsServiceServer interface {
	// GetCampaignStats returns campaign performance metrics
	GetCampaignStats(context.Context, *CampaignStatsRequest) (*CampaignStatsResponse, error)
	// GetFraudAlerts returns detected fraud patterns
	GetFraudAlerts(context.Context, *FraudAlertsRequest) (*FraudAlertsResponse, error)
	// GetPredictionAccuracy returns ML model performance metrics
	GetPredictionAccuracy(context.Context, *AccuracyRequest) (*AccuracyResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetCampaignStats(context.Context, *CampaignStatsRequest) (*CampaignStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignStats not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetFraudAlerts(context.Context, *FraudAlertsRequest) (*FraudAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFraudAlerts not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetPredictionAccuracy(context.Context, *AccuracyRequest) (*AccuracyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictionAccuracy not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetCampaignStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetCampaignStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetCampaignStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetCampaignStats(ctx, req.(*CampaignStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetFraudAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FraudAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetFraudAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetFraudAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetFraudAlerts(ctx, req.(*FraudAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetPredictionAccuracy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccuracyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPredictionAccuracy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPredictionAccuracy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPredictionAccuracy(ctx, req.(*AccuracyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidding.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampaignStats",
			Handler:    _AnalyticsService_GetCampaignStats_Handler,
		},
		{
			MethodName: "GetFraudAlerts",
			Handler:    _AnalyticsService_GetFraudAlerts_Handler,
		},
		{
			MethodName: "GetPredictionAccuracy",
			Handler:    _AnalyticsService_GetPredictionAccuracy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/bidding.proto",
}
